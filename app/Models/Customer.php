<?php

namespace App\Models;

use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Notifications\Notifiable;
use App\Traits\HasAutoGeneratedId;

class Customer extends Authenticatable
{
    use HasFactory, Notifiable, HasAutoGeneratedId;

    protected $primaryKey = 'customer_id';

    /**
     * Get the prefix for the auto-generated ID.
     */
    protected function getIdPrefix(): string
    {
        return 'CUST';
    }

    /**
     * Get the total length of the auto-generated ID.
     */
    protected function getIdLength(): int
    {
        return 15;
    }

    protected $fillable = [
        'user_id',
        'fullname',
        'email',
        'phone_number',
        'email_verification_code',
        'email_verification_code_expires_at',
        'email_verified_at',
    ];

    protected $hidden = [
        'email_verification_code',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'email_verification_code_expires_at' => 'datetime',
    ];

    /**
     * Get the password for authentication (from linked user)
     */
    public function getAuthPassword()
    {
        return $this->user ? $this->user->password : null;
    }

    /**
     * Get the username for authentication (use email)
     */
    public function getAuthIdentifierName()
    {
        return 'email';
    }

    /**
     * Get the unique identifier for authentication
     */
    public function getAuthIdentifier()
    {
        return $this->email;
    }

    /**
     * Check if customer email is verified
     */
    public function hasVerifiedEmail()
    {
        return !is_null($this->email_verified_at);
    }

    /**
     * Mark customer email as verified
     */
    public function markEmailAsVerified()
    {
        $this->email_verified_at = now();
        $this->email_verification_code = null;
        $this->email_verification_code_expires_at = null;
        $this->save();
    }

    /**
     * Generate email verification code
     */
    public function generateEmailVerificationCode()
    {
        $this->email_verification_code = str_pad(random_int(0, 999999), 6, '0', STR_PAD_LEFT);
        $this->email_verification_code_expires_at = now()->addMinutes(10);
        $this->save();
        
        return $this->email_verification_code;
    }

    /**
     * Get the user that owns the customer.
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class, 'user_id', 'user_id');
    }

    /**
     * Get the reservations for this customer.
     */
    public function reservations(): HasMany
    {
        return $this->hasMany(Reservation::class, 'customer_id', 'customer_id');
    }

    /**
     * Get the transactions for this customer.
     */
    public function transactions(): HasMany
    {
        return $this->hasMany(Transaction::class, 'customer_id', 'customer_id');
    }

    /**
     * Scope for active customers (based on user's is_active status)
     */
    public function scopeActive($query)
    {
        return $query->whereHas('user', function ($q) {
            $q->where('is_active', true);
        });
    }

    /**
     * Get customer's formatted name for display
     */
    public function getDisplayNameAttribute()
    {
        return $this->fullname;
    }

    /**
     * Get customer's contact information
     */
    public function getContactInfoAttribute()
    {
        $info = [];
        if ($this->email) $info[] = $this->email;
        if ($this->phone_number) $info[] = $this->phone_number;
        return implode(' â€¢ ', $info);
    }
}
