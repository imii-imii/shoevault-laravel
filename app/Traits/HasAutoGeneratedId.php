<?php

namespace App\Traits;

use Illuminate\Support\Str;

trait HasAutoGeneratedId
{
    /**
     * Boot the trait.
     */
    protected static function bootHasAutoGeneratedId()
    {
        static::creating(function ($model) {
            if (empty($model->{$model->getKeyName()})) {
                $model->{$model->getKeyName()} = static::generateUniqueId($model);
            }
        });
    }

    /**
     * Generate a unique ID for the model.
     */
    protected static function generateUniqueId($model)
    {
        $prefix = $model->getIdPrefix();
        $length = $model->getIdLength() - strlen($prefix);
        
        do {
            $randomString = strtoupper(Str::random($length));
            $id = $prefix . $randomString;
        } while (static::where($model->getKeyName(), $id)->exists());

        return $id;
    }

    /**
     * Get the prefix for the auto-generated ID.
     * Override this method in your model.
     */
    protected function getIdPrefix(): string
    {
        return 'ID';
    }

    /**
     * Get the total length of the auto-generated ID.
     * Override this method in your model.
     */
    protected function getIdLength(): int
    {
        return 10;
    }

    /**
     * Indicates if the model's ID is auto-incrementing.
     */
    public function getIncrementing()
    {
        return false;
    }

    /**
     * Get the data type of the primary key ID.
     */
    public function getKeyType()
    {
        return 'string';
    }
}